/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/test-db/route";
exports.ids = ["app/api/test-db/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest-db%2Froute&page=%2Fapi%2Ftest-db%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-db%2Froute.ts&appDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest-db%2Froute&page=%2Fapi%2Ftest-db%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-db%2Froute.ts&appDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mnt_f_data_git_claude_code_ayauke_page_ayauke_page_src_app_api_test_db_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/test-db/route.ts */ \"(rsc)/./src/app/api/test-db/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/test-db/route\",\n        pathname: \"/api/test-db\",\n        filename: \"route\",\n        bundlePath: \"app/api/test-db/route\"\n    },\n    resolvedPagePath: \"/mnt/f/data/git/claude-code/ayauke-page/ayauke-page/src/app/api/test-db/route.ts\",\n    nextConfigOutput,\n    userland: _mnt_f_data_git_claude_code_ayauke_page_ayauke_page_src_app_api_test_db_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXN0LWRiJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0ZXN0LWRiJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGVzdC1kYiUyRnJvdXRlLnRzJmFwcERpcj0lMkZtbnQlMkZmJTJGZGF0YSUyRmdpdCUyRmNsYXVkZS1jb2RlJTJGYXlhdWtlLXBhZ2UlMkZheWF1a2UtcGFnZSUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGbW50JTJGZiUyRmRhdGElMkZnaXQlMkZjbGF1ZGUtY29kZSUyRmF5YXVrZS1wYWdlJTJGYXlhdWtlLXBhZ2UmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ2dDO0FBQzdHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvbW50L2YvZGF0YS9naXQvY2xhdWRlLWNvZGUvYXlhdWtlLXBhZ2UvYXlhdWtlLXBhZ2Uvc3JjL2FwcC9hcGkvdGVzdC1kYi9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGVzdC1kYi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Rlc3QtZGJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3Rlc3QtZGIvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvbW50L2YvZGF0YS9naXQvY2xhdWRlLWNvZGUvYXlhdWtlLXBhZ2UvYXlhdWtlLXBhZ2Uvc3JjL2FwcC9hcGkvdGVzdC1kYi9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest-db%2Froute&page=%2Fapi%2Ftest-db%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-db%2Froute.ts&appDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/test-db/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/test-db/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// 백업용 컬렉션명 (이 컬렉션들은 백업/복원 대상에서 제외)\nconst BACKUP_COLLECTIONS = [\n    'backups',\n    'backup_logs'\n];\nasync function GET(request) {\n    try {\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n        const db = (mongoose__WEBPACK_IMPORTED_MODULE_2___default().connection).db;\n        const searchParams = request.nextUrl.searchParams;\n        const action = searchParams.get('action');\n        if (action === 'list-backups') {\n            // 백업 목록 조회 (청크 파일 제외)\n            const backupsCollection = db?.collection('backups');\n            const backups = await backupsCollection?.find({\n                isChunk: {\n                    $ne: true\n                } // 청크가 아닌 메인 백업만 조회\n            }).sort({\n                timestamp: -1\n            }).limit(20).toArray();\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                backups: backups || [],\n                count: backups?.length || 0\n            });\n        }\n        if (action === 'list-collections') {\n            // 현재 컬렉션 목록 조회 (백업용 컬렉션 제외)\n            const collections = await db?.listCollections().toArray();\n            const dataCollections = collections?.filter((col)=>!BACKUP_COLLECTIONS.includes(col.name)) || [];\n            const collectionStats = [];\n            for (const col of dataCollections){\n                const collection = db?.collection(col.name);\n                const count = await collection?.countDocuments() || 0;\n                collectionStats.push({\n                    name: col.name,\n                    count: count,\n                    type: col.type || 'collection'\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                collections: collectionStats,\n                totalCollections: collectionStats.length,\n                totalDocuments: collectionStats.reduce((sum, col)=>sum + col.count, 0)\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Invalid action parameter. Use: list-backups, list-collections'\n        }, {\n            status: 400\n        });\n    } catch (error) {\n        console.error('GET /test-db error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n        const db = (mongoose__WEBPACK_IMPORTED_MODULE_2___default().connection).db;\n        const body = await request.json();\n        const { action, backupName } = body;\n        if (action === 'backup') {\n            // 전체 데이터베이스 백업 (백업용 컬렉션 제외)\n            const collections = await db?.listCollections().toArray();\n            const dataCollections = collections?.filter((col)=>!BACKUP_COLLECTIONS.includes(col.name)) || [];\n            const backupData = {};\n            let totalDocuments = 0;\n            // 각 컬렉션의 모든 데이터 백업\n            for (const col of dataCollections){\n                const collection = db?.collection(col.name);\n                const documents = await collection?.find({}).toArray() || [];\n                backupData[col.name] = documents;\n                totalDocuments += documents.length;\n            }\n            // 백업 메타데이터 생성\n            const timestamp = new Date();\n            const backupId = `backup_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n            const name = backupName || `backup_${timestamp.toISOString().slice(0, 19).replace(/[:.]/g, '-')}`;\n            const backupsCollection = db?.collection('backups');\n            // 백업을 더 작은 청크로 분할하여 저장\n            const MAX_CHUNK_SIZE = 5 * 1024 * 1024; // 5MB 제한 (더 안전하게)\n            const chunks = [];\n            let chunkIndex = 0;\n            for (const [collectionName, documents] of Object.entries(backupData)){\n                const documentsArray = documents;\n                // 컬렉션이 비어있으면 건너뛰기\n                if (documentsArray.length === 0) {\n                    chunks.push({\n                        backupId,\n                        name: `${name}_chunk_${chunkIndex}`,\n                        timestamp,\n                        chunkIndex,\n                        isChunk: true,\n                        collections: {\n                            [collectionName]: []\n                        }\n                    });\n                    chunkIndex++;\n                    continue;\n                }\n                // 큰 컬렉션은 문서 단위로 분할\n                const collectionSize = JSON.stringify(documentsArray).length;\n                if (collectionSize > MAX_CHUNK_SIZE) {\n                    console.log(`큰 컬렉션 분할: ${collectionName} (${Math.round(collectionSize / 1024 / 1024)}MB)`);\n                    // 문서를 작은 배치로 나누기\n                    const batchSize = Math.max(1, Math.floor(documentsArray.length * MAX_CHUNK_SIZE / collectionSize));\n                    for(let i = 0; i < documentsArray.length; i += batchSize){\n                        const batch = documentsArray.slice(i, i + batchSize);\n                        chunks.push({\n                            backupId,\n                            name: `${name}_chunk_${chunkIndex}`,\n                            timestamp,\n                            chunkIndex,\n                            isChunk: true,\n                            collections: {\n                                [collectionName]: batch\n                            },\n                            partialCollection: true,\n                            partInfo: {\n                                collectionName,\n                                partIndex: Math.floor(i / batchSize),\n                                totalParts: Math.ceil(documentsArray.length / batchSize)\n                            }\n                        });\n                        chunkIndex++;\n                    }\n                } else {\n                    // 작은 컬렉션은 그대로 저장\n                    chunks.push({\n                        backupId,\n                        name: `${name}_chunk_${chunkIndex}`,\n                        timestamp,\n                        chunkIndex,\n                        isChunk: true,\n                        collections: {\n                            [collectionName]: documentsArray\n                        }\n                    });\n                    chunkIndex++;\n                }\n            }\n            // 각 청크를 개별 문서로 저장\n            for (const chunk of chunks){\n                await backupsCollection?.insertOne(chunk);\n            }\n            // 메인 백업 문서 (메타데이터만)\n            const backupDocument = {\n                backupId,\n                name,\n                timestamp,\n                collections: {},\n                metadata: {\n                    totalDocuments,\n                    totalCollections: dataCollections.length,\n                    totalChunks: chunks.length,\n                    version: '2.0' // 새 버전으로 표시\n                }\n            };\n            // 메인 백업 문서 저장\n            await backupsCollection?.insertOne(backupDocument);\n            // 백업 로그 저장\n            const logsCollection = db?.collection('backup_logs');\n            await logsCollection?.insertOne({\n                action: 'backup_created',\n                backupName: name,\n                timestamp,\n                metadata: backupDocument.metadata\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: '백업이 성공적으로 생성되었습니다.',\n                backup: {\n                    name,\n                    timestamp,\n                    metadata: backupDocument.metadata\n                }\n            });\n        }\n        if (action === 'upload') {\n            const { backupData } = body;\n            if (!backupData) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: 'backupData is required for upload action'\n                }, {\n                    status: 400\n                });\n            }\n            try {\n                // 업로드된 백업 데이터 파싱\n                const uploadedBackup = typeof backupData === 'string' ? JSON.parse(backupData) : backupData;\n                if (!uploadedBackup.backup || !uploadedBackup.backup.backupId) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        error: '유효하지 않은 백업 파일입니다. backupId가 필요합니다.'\n                    }, {\n                        status: 400\n                    });\n                }\n                const backup = uploadedBackup.backup;\n                const backupsCollection = db?.collection('backups');\n                // 중복 백업 ID 확인\n                const existingBackup = await backupsCollection?.findOne({\n                    backupId: backup.backupId\n                });\n                if (existingBackup) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        error: `동일한 백업 ID(${backup.backupId})가 이미 존재합니다.`\n                    }, {\n                        status: 409\n                    });\n                }\n                // 새로운 백업 이름 생성 (중복 방지)\n                let uploadName = backup.name;\n                let counter = 1;\n                while(await backupsCollection?.findOne({\n                    name: uploadName\n                })){\n                    uploadName = `${backup.name}_업로드_${counter}`;\n                    counter++;\n                }\n                // 백업 데이터 저장 (청크 방식으로 분할)\n                const collections = backup.collections || {};\n                const MAX_CHUNK_SIZE = 5 * 1024 * 1024;\n                const chunks = [];\n                let chunkIndex = 0;\n                let totalDocuments = 0;\n                // 각 컬렉션을 청크로 분할\n                for (const [collectionName, documents] of Object.entries(collections)){\n                    const documentsArray = documents;\n                    totalDocuments += documentsArray.length;\n                    if (documentsArray.length === 0) {\n                        chunks.push({\n                            backupId: backup.backupId,\n                            name: `${uploadName}_chunk_${chunkIndex}`,\n                            timestamp: new Date(backup.timestamp || new Date()),\n                            chunkIndex,\n                            isChunk: true,\n                            collections: {\n                                [collectionName]: []\n                            }\n                        });\n                        chunkIndex++;\n                        continue;\n                    }\n                    const collectionSize = JSON.stringify(documentsArray).length;\n                    if (collectionSize > MAX_CHUNK_SIZE) {\n                        const batchSize = Math.max(1, Math.floor(documentsArray.length * MAX_CHUNK_SIZE / collectionSize));\n                        for(let i = 0; i < documentsArray.length; i += batchSize){\n                            const batch = documentsArray.slice(i, i + batchSize);\n                            chunks.push({\n                                backupId: backup.backupId,\n                                name: `${uploadName}_chunk_${chunkIndex}`,\n                                timestamp: new Date(backup.timestamp || new Date()),\n                                chunkIndex,\n                                isChunk: true,\n                                collections: {\n                                    [collectionName]: batch\n                                },\n                                partialCollection: true,\n                                partInfo: {\n                                    collectionName,\n                                    partIndex: Math.floor(i / batchSize),\n                                    totalParts: Math.ceil(documentsArray.length / batchSize)\n                                }\n                            });\n                            chunkIndex++;\n                        }\n                    } else {\n                        chunks.push({\n                            backupId: backup.backupId,\n                            name: `${uploadName}_chunk_${chunkIndex}`,\n                            timestamp: new Date(backup.timestamp || new Date()),\n                            chunkIndex,\n                            isChunk: true,\n                            collections: {\n                                [collectionName]: documentsArray\n                            }\n                        });\n                        chunkIndex++;\n                    }\n                }\n                // 청크들 저장\n                for (const chunk of chunks){\n                    await backupsCollection?.insertOne(chunk);\n                }\n                // 메인 백업 문서 저장\n                const uploadedBackupDocument = {\n                    backupId: backup.backupId,\n                    name: uploadName,\n                    timestamp: new Date(backup.timestamp || new Date()),\n                    collections: {},\n                    metadata: {\n                        totalDocuments,\n                        totalCollections: Object.keys(collections).length,\n                        totalChunks: chunks.length,\n                        version: backup.metadata?.version || '2.0',\n                        ...backup.metadata\n                    }\n                };\n                await backupsCollection?.insertOne(uploadedBackupDocument);\n                // 업로드 로그 저장\n                const logsCollection = db?.collection('backup_logs');\n                await logsCollection?.insertOne({\n                    action: 'backup_uploaded',\n                    backupName: uploadName,\n                    originalBackupId: backup.backupId,\n                    timestamp: new Date(),\n                    metadata: uploadedBackupDocument.metadata\n                });\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    message: '백업이 성공적으로 업로드되었습니다.',\n                    backup: {\n                        backupId: backup.backupId,\n                        name: uploadName,\n                        timestamp: uploadedBackupDocument.timestamp,\n                        metadata: uploadedBackupDocument.metadata\n                    }\n                });\n            } catch (error) {\n                console.error('백업 업로드 파싱 오류:', error);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: '백업 파일 형식이 올바르지 않습니다.'\n                }, {\n                    status: 400\n                });\n            }\n        }\n        if (action === 'restore') {\n            const { backupName: restoreBackupName, downloadOnly } = body;\n            if (!restoreBackupName) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: 'backupName is required for restore action'\n                }, {\n                    status: 400\n                });\n            }\n            // 백업 데이터 조회\n            const backupsCollection = db?.collection('backups');\n            const backup = await backupsCollection?.findOne({\n                name: restoreBackupName\n            });\n            if (!backup) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: `Backup '${restoreBackupName}' not found`\n                }, {\n                    status: 404\n                });\n            }\n            const restoreResults = [];\n            let allBackupData = {};\n            // 버전 2.0 백업 (청크 방식)인지 확인\n            if (backup.metadata?.version === '2.0' && backup.metadata?.totalChunks > 0) {\n                console.log(`청크 방식 백업 복원 시작: ${backup.metadata.totalChunks}개 청크`);\n                // 모든 청크 데이터 수집\n                const allChunks = await backupsCollection?.find({\n                    name: {\n                        $regex: `^${restoreBackupName}_chunk_`\n                    },\n                    isChunk: true\n                }).toArray();\n                console.log(`총 ${allChunks?.length || 0}개 청크 발견`);\n                if (allChunks) {\n                    for (const chunk of allChunks){\n                        if (chunk.collections) {\n                            // 청크의 컬렉션 데이터를 통합\n                            for (const [collectionName, documents] of Object.entries(chunk.collections)){\n                                if (!allBackupData[collectionName]) {\n                                    allBackupData[collectionName] = [];\n                                }\n                                allBackupData[collectionName].push(...documents);\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 기존 방식 백업 (v1.0)\n                allBackupData = backup.collections;\n            }\n            // downloadOnly가 true이면 데이터만 반환하고 복원하지 않음\n            if (downloadOnly) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    backup: {\n                        backupId: backup.backupId,\n                        name: backup.name,\n                        timestamp: backup.timestamp,\n                        metadata: backup.metadata,\n                        collections: allBackupData\n                    }\n                });\n            }\n            // 각 컬렉션 복원\n            for (const [collectionName, documents] of Object.entries(allBackupData)){\n                const typedDocuments = documents;\n                try {\n                    const collection = db?.collection(collectionName);\n                    // 기존 데이터 삭제\n                    await collection?.deleteMany({});\n                    // 백업 데이터 삽입\n                    if (typedDocuments.length > 0) {\n                        await collection?.insertMany(typedDocuments);\n                    }\n                    restoreResults.push({\n                        collection: collectionName,\n                        success: true,\n                        restoredCount: typedDocuments.length\n                    });\n                } catch (error) {\n                    restoreResults.push({\n                        collection: collectionName,\n                        success: false,\n                        error: error instanceof Error ? error.message : 'Unknown error'\n                    });\n                }\n            }\n            // 복원 로그 저장\n            const logsCollection = db?.collection('backup_logs');\n            await logsCollection?.insertOne({\n                action: 'backup_restored',\n                backupName: restoreBackupName,\n                timestamp: new Date(),\n                results: restoreResults\n            });\n            const successCount = restoreResults.filter((r)=>r.success).length;\n            const totalCount = restoreResults.length;\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: `백업 복원 완료 (${successCount}/${totalCount} 컬렉션 성공)`,\n                results: restoreResults,\n                backup: {\n                    backupId: backup.backupId,\n                    name: backup.name,\n                    originalTimestamp: backup.timestamp,\n                    metadata: backup.metadata\n                }\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Invalid action. Use: backup, restore'\n        }, {\n            status: 400\n        });\n    } catch (error) {\n        console.error('POST /test-db error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function DELETE(request) {\n    try {\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n        const db = (mongoose__WEBPACK_IMPORTED_MODULE_2___default().connection).db;\n        const body = await request.json();\n        const { action, backupName } = body;\n        if (action === 'delete-backup') {\n            if (!backupName) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: 'backupName is required'\n                }, {\n                    status: 400\n                });\n            }\n            const backupsCollection = db?.collection('backups');\n            // 메인 백업 문서 삭제\n            const result = await backupsCollection?.deleteOne({\n                name: backupName\n            });\n            if (result?.deletedCount === 0) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: `Backup '${backupName}' not found`\n                }, {\n                    status: 404\n                });\n            }\n            // 관련 청크들도 삭제\n            const chunkResult = await backupsCollection?.deleteMany({\n                name: {\n                    $regex: `^${backupName}_chunk_`\n                },\n                isChunk: true\n            });\n            // 삭제 로그 저장\n            const logsCollection = db?.collection('backup_logs');\n            await logsCollection?.insertOne({\n                action: 'backup_deleted',\n                backupName,\n                deletedChunks: chunkResult?.deletedCount || 0,\n                timestamp: new Date()\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: `백업 '${backupName}'이 삭제되었습니다. (청크 ${chunkResult?.deletedCount || 0}개 포함)`\n            });\n        }\n        if (action === 'clear-all-backups') {\n            const backupsCollection = db?.collection('backups');\n            const result = await backupsCollection?.deleteMany({});\n            // 삭제 로그 저장\n            const logsCollection = db?.collection('backup_logs');\n            await logsCollection?.insertOne({\n                action: 'all_backups_cleared',\n                deletedCount: result?.deletedCount || 0,\n                timestamp: new Date()\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: `모든 백업이 삭제되었습니다. (${result?.deletedCount || 0}개)`\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Invalid action. Use: delete-backup, clear-all-backups'\n        }, {\n            status: 400\n        });\n    } catch (error) {\n        console.error('DELETE /test-db error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/test-db/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mongodb.ts":
/*!****************************!*\
  !*** ./src/lib/mongodb.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectToDatabase: () => (/* binding */ dbConnect),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n\nconst MONGODB_URI = process.env.MONGODB_URI;\nif (!MONGODB_URI) {\n    throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\nlet cached = global.mongoose;\nif (!cached) {\n    cached = global.mongoose = {\n        conn: null,\n        promise: null\n    };\n}\nasync function dbConnect() {\n    if (cached.conn) {\n        // console.log('🔄 기존 MongoDB 연결 재사용');\n        return cached.conn;\n    }\n    if (!cached.promise) {\n        // console.log('🚀 새로운 MongoDB 연결 시작...');\n        // console.log('📍 MongoDB URI:', MONGODB_URI ? 'URI 설정됨' : 'URI 없음');\n        const opts = {\n            bufferCommands: false,\n            serverSelectionTimeoutMS: 5000,\n            connectTimeoutMS: 5000\n        };\n        cached.promise = mongoose__WEBPACK_IMPORTED_MODULE_0___default().connect(MONGODB_URI, opts).then((mongoose)=>{\n            // console.log('✅ MongoDB 연결 성공!');\n            return mongoose;\n        });\n    }\n    try {\n        cached.conn = await cached.promise;\n    } catch (e) {\n        console.error('❌ MongoDB 연결 실패:', e);\n        cached.promise = null;\n        throw e;\n    }\n    return cached.conn;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dbConnect);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL21vbmdvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnQztBQUVoQyxNQUFNQyxjQUFjQyxRQUFRQyxHQUFHLENBQUNGLFdBQVc7QUFFM0MsSUFBSSxDQUFDQSxhQUFhO0lBQ2hCLE1BQU0sSUFBSUcsTUFDUjtBQUVKO0FBV0EsSUFBSUMsU0FBU0MsT0FBT04sUUFBUTtBQUU1QixJQUFJLENBQUNLLFFBQVE7SUFDWEEsU0FBU0MsT0FBT04sUUFBUSxHQUFHO1FBQUVPLE1BQU07UUFBTUMsU0FBUztJQUFLO0FBQ3pEO0FBRUEsZUFBZUM7SUFDYixJQUFJSixPQUFPRSxJQUFJLEVBQUU7UUFDZix1Q0FBdUM7UUFDdkMsT0FBT0YsT0FBT0UsSUFBSTtJQUNwQjtJQUVBLElBQUksQ0FBQ0YsT0FBT0csT0FBTyxFQUFFO1FBQ25CLDBDQUEwQztRQUMxQyxzRUFBc0U7UUFFdEUsTUFBTUUsT0FBTztZQUNYQyxnQkFBZ0I7WUFDaEJDLDBCQUEwQjtZQUMxQkMsa0JBQWtCO1FBQ3BCO1FBRUFSLE9BQU9HLE9BQU8sR0FBR1IsdURBQWdCLENBQUNDLGFBQWNTLE1BQU1LLElBQUksQ0FBQyxDQUFDZjtZQUMxRCxtQ0FBbUM7WUFDbkMsT0FBT0E7UUFDVDtJQUNGO0lBRUEsSUFBSTtRQUNGSyxPQUFPRSxJQUFJLEdBQUcsTUFBTUYsT0FBT0csT0FBTztJQUNwQyxFQUFFLE9BQU9RLEdBQUc7UUFDVkMsUUFBUUMsS0FBSyxDQUFDLG9CQUFvQkY7UUFDbENYLE9BQU9HLE9BQU8sR0FBRztRQUNqQixNQUFNUTtJQUNSO0lBRUEsT0FBT1gsT0FBT0UsSUFBSTtBQUNwQjtBQUVBLGlFQUFlRSxTQUFTQSxFQUFDO0FBQ2lCIiwic291cmNlcyI6WyIvbW50L2YvZGF0YS9naXQvY2xhdWRlLWNvZGUvYXlhdWtlLXBhZ2UvYXlhdWtlLXBhZ2Uvc3JjL2xpYi9tb25nb2RiLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XG5cbmNvbnN0IE1PTkdPREJfVVJJID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkk7XG5cbmlmICghTU9OR09EQl9VUkkpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICdQbGVhc2UgZGVmaW5lIHRoZSBNT05HT0RCX1VSSSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbnNpZGUgLmVudi5sb2NhbCdcbiAgKTtcbn1cblxuaW50ZXJmYWNlIE1vbmdvb3NlQ2FjaGUge1xuICBjb25uOiB0eXBlb2YgbW9uZ29vc2UgfCBudWxsO1xuICBwcm9taXNlOiBQcm9taXNlPHR5cGVvZiBtb25nb29zZT4gfCBudWxsO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBtb25nb29zZTogTW9uZ29vc2VDYWNoZTtcbn1cblxubGV0IGNhY2hlZCA9IGdsb2JhbC5tb25nb29zZTtcblxuaWYgKCFjYWNoZWQpIHtcbiAgY2FjaGVkID0gZ2xvYmFsLm1vbmdvb3NlID0geyBjb25uOiBudWxsLCBwcm9taXNlOiBudWxsIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRiQ29ubmVjdCgpOiBQcm9taXNlPHR5cGVvZiBtb25nb29zZT4ge1xuICBpZiAoY2FjaGVkLmNvbm4pIHtcbiAgICAvLyBjb25zb2xlLmxvZygn8J+UhCDquLDsobQgTW9uZ29EQiDsl7DqsrAg7J6s7IKs7JqpJyk7XG4gICAgcmV0dXJuIGNhY2hlZC5jb25uO1xuICB9XG5cbiAgaWYgKCFjYWNoZWQucHJvbWlzZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCfwn5qAIOyDiOuhnOyatCBNb25nb0RCIOyXsOqysCDsi5zsnpEuLi4nKTtcbiAgICAvLyBjb25zb2xlLmxvZygn8J+TjSBNb25nb0RCIFVSSTonLCBNT05HT0RCX1VSSSA/ICdVUkkg7ISk7KCV65CoJyA6ICdVUkkg7JeG7J2MJyk7XG4gICAgXG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIGJ1ZmZlckNvbW1hbmRzOiBmYWxzZSxcbiAgICAgIHNlcnZlclNlbGVjdGlvblRpbWVvdXRNUzogNTAwMCwgLy8gNey0iOuhnCDri6jstpVcbiAgICAgIGNvbm5lY3RUaW1lb3V0TVM6IDUwMDAsXG4gICAgfTtcblxuICAgIGNhY2hlZC5wcm9taXNlID0gbW9uZ29vc2UuY29ubmVjdChNT05HT0RCX1VSSSEsIG9wdHMpLnRoZW4oKG1vbmdvb3NlKSA9PiB7XG4gICAgICAvLyBjb25zb2xlLmxvZygn4pyFIE1vbmdvREIg7Jew6rKwIOyEseqztSEnKTtcbiAgICAgIHJldHVybiBtb25nb29zZTtcbiAgICB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY2FjaGVkLmNvbm4gPSBhd2FpdCBjYWNoZWQucHJvbWlzZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBNb25nb0RCIOyXsOqysCDsi6TtjKg6JywgZSk7XG4gICAgY2FjaGVkLnByb21pc2UgPSBudWxsO1xuICAgIHRocm93IGU7XG4gIH1cblxuICByZXR1cm4gY2FjaGVkLmNvbm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRiQ29ubmVjdDtcbmV4cG9ydCB7IGRiQ29ubmVjdCBhcyBjb25uZWN0VG9EYXRhYmFzZSB9OyJdLCJuYW1lcyI6WyJtb25nb29zZSIsIk1PTkdPREJfVVJJIiwicHJvY2VzcyIsImVudiIsIkVycm9yIiwiY2FjaGVkIiwiZ2xvYmFsIiwiY29ubiIsInByb21pc2UiLCJkYkNvbm5lY3QiLCJvcHRzIiwiYnVmZmVyQ29tbWFuZHMiLCJzZXJ2ZXJTZWxlY3Rpb25UaW1lb3V0TVMiLCJjb25uZWN0VGltZW91dE1TIiwiY29ubmVjdCIsInRoZW4iLCJlIiwiY29uc29sZSIsImVycm9yIiwiY29ubmVjdFRvRGF0YWJhc2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mongodb.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("mongoose");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest-db%2Froute&page=%2Fapi%2Ftest-db%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-db%2Froute.ts&appDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Ff%2Fdata%2Fgit%2Fclaude-code%2Fayauke-page%2Fayauke-page&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();