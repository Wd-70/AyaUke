"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/songbook/page",{

/***/ "(app-pages-browser)/./src/utils/dateUtils.ts":
/*!********************************!*\
  !*** ./src/utils/dateUtils.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatOriginalDateForDisplay: () => (/* binding */ formatOriginalDateForDisplay),\n/* harmony export */   parseOriginalDateString: () => (/* binding */ parseOriginalDateString)\n/* harmony export */ });\nfunction parseOriginalDateString(originalDateString, fallbackSungDate) {\n    // originalDateString이 있으면 파싱\n    if (originalDateString) {\n        const match = originalDateString.match(/(\\d{2})\\.(\\d{1,2})\\.(\\d{1,2})/);\n        if (match) {\n            const year = parseInt(match[1]);\n            const month = parseInt(match[2]);\n            const day = parseInt(match[3]);\n            // 2000년대로 가정 (25 -> 2025)\n            const fullYear = year < 50 ? 2000 + year : 1900 + year;\n            return \"\".concat(fullYear, \"-\").concat(String(month).padStart(2, '0'), \"-\").concat(String(day).padStart(2, '0'));\n        }\n    }\n    // originalDateString이 없으면 기존 sungDate 사용 (하위 호환성)\n    if (fallbackSungDate) {\n        try {\n            const date = new Date(fallbackSungDate);\n            if (!isNaN(date.getTime())) {\n                return date.toISOString().split('T')[0];\n            }\n        } catch (error) {\n            console.warn('Failed to parse fallback date:', fallbackSungDate);\n        }\n    }\n    return new Date().toISOString().split('T')[0];\n}\nfunction formatOriginalDateForDisplay(originalDateString, fallbackSungDate) {\n    // originalDateString이 있으면 파싱\n    if (originalDateString) {\n        const match = originalDateString.match(/(\\d{2})\\.(\\d{1,2})\\.(\\d{1,2})/);\n        if (match) {\n            const year = parseInt(match[1]);\n            const month = parseInt(match[2]);\n            const day = parseInt(match[3]);\n            const fullYear = year < 50 ? 2000 + year : 1900 + year;\n            return \"\".concat(fullYear, \"-\").concat(String(month).padStart(2, '0'), \"-\").concat(String(day).padStart(2, '0'));\n        }\n        return originalDateString;\n    }\n    // originalDateString이 없으면 기존 sungDate 사용 (하위 호환성)\n    if (fallbackSungDate) {\n        try {\n            const date = new Date(fallbackSungDate);\n            if (!isNaN(date.getTime())) {\n                return date.toISOString().split('T')[0];\n            }\n        } catch (error) {\n            console.warn('Failed to parse fallback date:', fallbackSungDate);\n        }\n    }\n    return '날짜 없음';\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy91dGlscy9kYXRlVXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSx3QkFBd0JDLGtCQUEyQixFQUFFQyxnQkFBZ0M7SUFDbkcsNkJBQTZCO0lBQzdCLElBQUlELG9CQUFvQjtRQUN0QixNQUFNRSxRQUFRRixtQkFBbUJFLEtBQUssQ0FBQztRQUN2QyxJQUFJQSxPQUFPO1lBQ1QsTUFBTUMsT0FBT0MsU0FBU0YsS0FBSyxDQUFDLEVBQUU7WUFDOUIsTUFBTUcsUUFBUUQsU0FBU0YsS0FBSyxDQUFDLEVBQUU7WUFDL0IsTUFBTUksTUFBTUYsU0FBU0YsS0FBSyxDQUFDLEVBQUU7WUFDN0IsMEJBQTBCO1lBQzFCLE1BQU1LLFdBQVdKLE9BQU8sS0FBSyxPQUFPQSxPQUFPLE9BQU9BO1lBQ2xELE9BQU8sR0FBZUssT0FBWkQsVUFBUyxLQUFxQ0MsT0FBbENBLE9BQU9ILE9BQU9JLFFBQVEsQ0FBQyxHQUFHLE1BQUssS0FBZ0MsT0FBN0JELE9BQU9GLEtBQUtHLFFBQVEsQ0FBQyxHQUFHO1FBQ2xGO0lBQ0Y7SUFFQSxrREFBa0Q7SUFDbEQsSUFBSVIsa0JBQWtCO1FBQ3BCLElBQUk7WUFDRixNQUFNUyxPQUFPLElBQUlDLEtBQUtWO1lBQ3RCLElBQUksQ0FBQ1csTUFBTUYsS0FBS0csT0FBTyxLQUFLO2dCQUMxQixPQUFPSCxLQUFLSSxXQUFXLEdBQUdDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QztRQUNGLEVBQUUsT0FBT0MsT0FBTztZQUNkQyxRQUFRQyxJQUFJLENBQUMsa0NBQWtDakI7UUFDakQ7SUFDRjtJQUVBLE9BQU8sSUFBSVUsT0FBT0csV0FBVyxHQUFHQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDL0M7QUFFTyxTQUFTSSw2QkFBNkJuQixrQkFBMkIsRUFBRUMsZ0JBQWdDO0lBQ3hHLDZCQUE2QjtJQUM3QixJQUFJRCxvQkFBb0I7UUFDdEIsTUFBTUUsUUFBUUYsbUJBQW1CRSxLQUFLLENBQUM7UUFDdkMsSUFBSUEsT0FBTztZQUNULE1BQU1DLE9BQU9DLFNBQVNGLEtBQUssQ0FBQyxFQUFFO1lBQzlCLE1BQU1HLFFBQVFELFNBQVNGLEtBQUssQ0FBQyxFQUFFO1lBQy9CLE1BQU1JLE1BQU1GLFNBQVNGLEtBQUssQ0FBQyxFQUFFO1lBQzdCLE1BQU1LLFdBQVdKLE9BQU8sS0FBSyxPQUFPQSxPQUFPLE9BQU9BO1lBQ2xELE9BQU8sR0FBZUssT0FBWkQsVUFBUyxLQUFxQ0MsT0FBbENBLE9BQU9ILE9BQU9JLFFBQVEsQ0FBQyxHQUFHLE1BQUssS0FBZ0MsT0FBN0JELE9BQU9GLEtBQUtHLFFBQVEsQ0FBQyxHQUFHO1FBQ2xGO1FBQ0EsT0FBT1Q7SUFDVDtJQUVBLGtEQUFrRDtJQUNsRCxJQUFJQyxrQkFBa0I7UUFDcEIsSUFBSTtZQUNGLE1BQU1TLE9BQU8sSUFBSUMsS0FBS1Y7WUFDdEIsSUFBSSxDQUFDVyxNQUFNRixLQUFLRyxPQUFPLEtBQUs7Z0JBQzFCLE9BQU9ILEtBQUtJLFdBQVcsR0FBR0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pDO1FBQ0YsRUFBRSxPQUFPQyxPQUFPO1lBQ2RDLFFBQVFDLElBQUksQ0FBQyxrQ0FBa0NqQjtRQUNqRDtJQUNGO0lBRUEsT0FBTztBQUNUIiwic291cmNlcyI6WyIvbW50L2YvRGF0YS9HaXQvY2xhdWRlLWNvZGUvYXlhdWtlLXBhZ2UvYXlhdWtlLXBhZ2Uvc3JjL3V0aWxzL2RhdGVVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VPcmlnaW5hbERhdGVTdHJpbmcob3JpZ2luYWxEYXRlU3RyaW5nPzogc3RyaW5nLCBmYWxsYmFja1N1bmdEYXRlPzogc3RyaW5nIHwgRGF0ZSk6IHN0cmluZyB7XHJcbiAgLy8gb3JpZ2luYWxEYXRlU3RyaW5n7J20IOyeiOycvOuptCDtjIzsi7FcclxuICBpZiAob3JpZ2luYWxEYXRlU3RyaW5nKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IG9yaWdpbmFsRGF0ZVN0cmluZy5tYXRjaCgvKFxcZHsyfSlcXC4oXFxkezEsMn0pXFwuKFxcZHsxLDJ9KS8pO1xyXG4gICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgIGNvbnN0IHllYXIgPSBwYXJzZUludChtYXRjaFsxXSk7XHJcbiAgICAgIGNvbnN0IG1vbnRoID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xyXG4gICAgICBjb25zdCBkYXkgPSBwYXJzZUludChtYXRjaFszXSk7XHJcbiAgICAgIC8vIDIwMDDrhYTrjIDroZwg6rCA7KCVICgyNSAtPiAyMDI1KVxyXG4gICAgICBjb25zdCBmdWxsWWVhciA9IHllYXIgPCA1MCA/IDIwMDAgKyB5ZWFyIDogMTkwMCArIHllYXI7XHJcbiAgICAgIHJldHVybiBgJHtmdWxsWWVhcn0tJHtTdHJpbmcobW9udGgpLnBhZFN0YXJ0KDIsICcwJyl9LSR7U3RyaW5nKGRheSkucGFkU3RhcnQoMiwgJzAnKX1gO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvLyBvcmlnaW5hbERhdGVTdHJpbmfsnbQg7JeG7Jy866m0IOq4sOyhtCBzdW5nRGF0ZSDsgqzsmqkgKO2VmOychCDtmLjtmZjshLEpXHJcbiAgaWYgKGZhbGxiYWNrU3VuZ0RhdGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShmYWxsYmFja1N1bmdEYXRlKTtcclxuICAgICAgaWYgKCFpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcclxuICAgICAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHBhcnNlIGZhbGxiYWNrIGRhdGU6JywgZmFsbGJhY2tTdW5nRGF0ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE9yaWdpbmFsRGF0ZUZvckRpc3BsYXkob3JpZ2luYWxEYXRlU3RyaW5nPzogc3RyaW5nLCBmYWxsYmFja1N1bmdEYXRlPzogc3RyaW5nIHwgRGF0ZSk6IHN0cmluZyB7XHJcbiAgLy8gb3JpZ2luYWxEYXRlU3RyaW5n7J20IOyeiOycvOuptCDtjIzsi7FcclxuICBpZiAob3JpZ2luYWxEYXRlU3RyaW5nKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IG9yaWdpbmFsRGF0ZVN0cmluZy5tYXRjaCgvKFxcZHsyfSlcXC4oXFxkezEsMn0pXFwuKFxcZHsxLDJ9KS8pO1xyXG4gICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgIGNvbnN0IHllYXIgPSBwYXJzZUludChtYXRjaFsxXSk7XHJcbiAgICAgIGNvbnN0IG1vbnRoID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xyXG4gICAgICBjb25zdCBkYXkgPSBwYXJzZUludChtYXRjaFszXSk7XHJcbiAgICAgIGNvbnN0IGZ1bGxZZWFyID0geWVhciA8IDUwID8gMjAwMCArIHllYXIgOiAxOTAwICsgeWVhcjtcclxuICAgICAgcmV0dXJuIGAke2Z1bGxZZWFyfS0ke1N0cmluZyhtb250aCkucGFkU3RhcnQoMiwgJzAnKX0tJHtTdHJpbmcoZGF5KS5wYWRTdGFydCgyLCAnMCcpfWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3JpZ2luYWxEYXRlU3RyaW5nO1xyXG4gIH1cclxuICBcclxuICAvLyBvcmlnaW5hbERhdGVTdHJpbmfsnbQg7JeG7Jy866m0IOq4sOyhtCBzdW5nRGF0ZSDsgqzsmqkgKO2VmOychCDtmLjtmZjshLEpXHJcbiAgaWYgKGZhbGxiYWNrU3VuZ0RhdGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShmYWxsYmFja1N1bmdEYXRlKTtcclxuICAgICAgaWYgKCFpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcclxuICAgICAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHBhcnNlIGZhbGxiYWNrIGRhdGU6JywgZmFsbGJhY2tTdW5nRGF0ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiAn64Kg7KecIOyXhuydjCc7XHJcbn0iXSwibmFtZXMiOlsicGFyc2VPcmlnaW5hbERhdGVTdHJpbmciLCJvcmlnaW5hbERhdGVTdHJpbmciLCJmYWxsYmFja1N1bmdEYXRlIiwibWF0Y2giLCJ5ZWFyIiwicGFyc2VJbnQiLCJtb250aCIsImRheSIsImZ1bGxZZWFyIiwiU3RyaW5nIiwicGFkU3RhcnQiLCJkYXRlIiwiRGF0ZSIsImlzTmFOIiwiZ2V0VGltZSIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiZm9ybWF0T3JpZ2luYWxEYXRlRm9yRGlzcGxheSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/dateUtils.ts\n"));

/***/ })

});