"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/songbook/page",{

/***/ "(app-pages-browser)/./src/hooks/useLikes.ts":
/*!*******************************!*\
  !*** ./src/hooks/useLikes.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBulkLikes: () => (/* binding */ useBulkLikes),\n/* harmony export */   useLike: () => (/* binding */ useLike),\n/* harmony export */   useLikes: () => (/* binding */ useLikes),\n/* harmony export */   useUserLikes: () => (/* binding */ useUserLikes)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/./node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// 전역 상태 관리를 위한 간단한 store\nclass LikesStore {\n    setLike(songId, liked) {\n        this.likes.set(songId, liked);\n        this.notifySubscribers(songId);\n        // 전역 이벤트 발생\n        if (true) {\n            window.dispatchEvent(new CustomEvent('likesUpdated'));\n        }\n    }\n    getLike(songId) {\n        return this.likes.get(songId);\n    }\n    setLoading(songId, loading) {\n        if (loading) {\n            this.loading.add(songId);\n        } else {\n            this.loading.delete(songId);\n        }\n        this.notifySubscribers(songId);\n    }\n    isLoading(songId) {\n        return this.loading.has(songId);\n    }\n    subscribe(songId, callback) {\n        if (!this.subscribers.has(songId)) {\n            this.subscribers.set(songId, new Set());\n        }\n        this.subscribers.get(songId).add(callback);\n        return ()=>{\n            const songSubscribers = this.subscribers.get(songId);\n            if (songSubscribers) {\n                songSubscribers.delete(callback);\n                if (songSubscribers.size === 0) {\n                    this.subscribers.delete(songId);\n                }\n            }\n        };\n    }\n    notifySubscribers(songId) {\n        const songSubscribers = this.subscribers.get(songId);\n        if (songSubscribers) {\n            songSubscribers.forEach((callback)=>callback());\n        }\n    }\n    // bulk 데이터를 직접 설정\n    setBulkLikes(likesData) {\n        Object.entries(likesData).forEach((param)=>{\n            let [songId, liked] = param;\n            this.likes.set(songId, liked);\n            this.notifySubscribers(songId);\n        });\n        // 전역 이벤트 발생\n        if (true) {\n            window.dispatchEvent(new CustomEvent('likesUpdated'));\n        }\n    }\n    // 좋아요한 곡 ID들 반환\n    getLikedSongIds() {\n        const likedIds = [];\n        this.likes.forEach((liked, songId)=>{\n            if (liked) {\n                likedIds.push(songId);\n            }\n        });\n        return likedIds;\n    }\n    // 대량 로딩 (중복 방지)\n    async bulkLoadLikes(songIds) {\n        let priority = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'low';\n        if (this.bulkLoadPromise && priority === 'low') {\n            // 낮은 우선순위 요청이고 이미 진행 중인 요청이 있으면 기다림\n            await this.bulkLoadPromise;\n        }\n        // 아직 로딩되지 않은 곡들만 필터링\n        const unloadedSongIds = songIds.filter((id)=>!this.likes.has(id));\n        if (unloadedSongIds.length === 0) {\n            console.log(\"⏭️ 모든 곡이 이미 로딩됨: \".concat(songIds.length, \"곡\"));\n            return;\n        }\n        // 동일한 요청이 진행 중인지 확인 (songIds 배열을 문자열로 변환하여 비교)\n        const requestKey = unloadedSongIds.sort().join(',');\n        if (this.bulkLoadPromise) {\n            console.log(\"⌛ 동일한 대량 로딩 요청 대기 중: \".concat(unloadedSongIds.length, \"곡\"));\n            await this.bulkLoadPromise;\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 대량 좋아요 로딩 시작 (\".concat(priority, \"): \").concat(unloadedSongIds.length, \"곡\"));\n        this.bulkLoadPromise = this.performBulkLoad(unloadedSongIds);\n        await this.bulkLoadPromise;\n        this.bulkLoadPromise = null;\n    }\n    async performBulkLoad(songIds) {\n        try {\n            const response = await fetch('/api/likes-bulk', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    songIds\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                // 결과를 store에 저장하고 모든 관련 구독자에게 알림\n                Object.entries(data.likes).forEach((param)=>{\n                    let [songId, liked] = param;\n                    this.likes.set(songId, liked);\n                    this.notifySubscribers(songId);\n                });\n                console.log(\"✅ 대량 좋아요 로딩 완료: \".concat(Object.keys(data.likes).length, \"곡\"));\n            } else {\n                console.error('대량 좋아요 로딩 실패:', response.status);\n            }\n        } catch (error) {\n            console.error('대량 좋아요 로딩 오류:', error);\n        }\n    }\n    reset() {\n        this.likes.clear();\n        this.loading.clear();\n        this.subscribers.clear();\n        this.bulkLoadPromise = null;\n    }\n    constructor(){\n        this.likes = new Map();\n        this.loading = new Set();\n        this.subscribers = new Map();\n        this.bulkLoadPromise = null;\n    }\n}\nconst likesStore = new LikesStore();\n// 전역 이벤트 리스너 설정 (플레이리스트에서 bulk 데이터 수신)\nif (true) {\n    window.addEventListener('likesLoaded', (event)=>{\n        const { likes } = event.detail;\n        console.log('📨 좋아요 bulk 데이터 수신:', likes);\n        likesStore.setBulkLikes(likes);\n    });\n}\nfunction useLike(songId) {\n    var _session_user;\n    const { data: session } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_1__.useSession)();\n    const [updateCounter, setUpdateCounter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const mounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    // 강제 업데이트 함수\n    const forceUpdate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useLike.useCallback[forceUpdate]\": ()=>{\n            if (mounted.current) {\n                setUpdateCounter({\n                    \"useLike.useCallback[forceUpdate]\": (prev)=>prev + 1\n                }[\"useLike.useCallback[forceUpdate]\"]);\n            }\n        }\n    }[\"useLike.useCallback[forceUpdate]\"], []);\n    // 컴포넌트 언마운트 시 cleanup\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useLike.useEffect\": ()=>{\n            mounted.current = true;\n            return ({\n                \"useLike.useEffect\": ()=>{\n                    mounted.current = false;\n                }\n            })[\"useLike.useEffect\"];\n        }\n    }[\"useLike.useEffect\"], []);\n    // 세션 변경 시 store 리셋 (다른 사용자로 변경된 경우에만)\n    const prevChannelIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useLike.useEffect\": ()=>{\n            var _session_user;\n            const currentChannelId = (session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.channelId) || null;\n            // 이전 channelId가 있었는데 다른 사용자로 변경된 경우에만 리셋\n            if (prevChannelIdRef.current && prevChannelIdRef.current !== currentChannelId) {\n                console.log('🔄 사용자 변경 감지, store 리셋:', prevChannelIdRef.current, '->', currentChannelId);\n                likesStore.reset();\n            }\n            prevChannelIdRef.current = currentChannelId;\n        }\n    }[\"useLike.useEffect\"], [\n        session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.channelId\n    ]);\n    // store 구독 - UI 업데이트를 위해 필요\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useLike.useEffect\": ()=>{\n            if (!songId) return;\n            const unsubscribe = likesStore.subscribe(songId, forceUpdate);\n            return unsubscribe;\n        }\n    }[\"useLike.useEffect\"], [\n        songId,\n        forceUpdate\n    ]);\n    // 개별 API 호출 제거 - 오직 대량 로딩에만 의존\n    const toggleLike = async ()=>{\n        var _session_user;\n        if (!(session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.channelId)) {\n            setError('로그인이 필요합니다');\n            return;\n        }\n        const currentLiked = likesStore.getLike(songId) || false;\n        const newLikedState = !currentLiked;\n        // 즉시 UI 반영 (낙관적 업데이트)\n        likesStore.setLike(songId, newLikedState);\n        likesStore.setLoading(songId, true);\n        setError(null);\n        try {\n            if (currentLiked) {\n                // 좋아요 취소\n                const response = await fetch(\"/api/likes?songId=\".concat(songId), {\n                    method: 'DELETE'\n                });\n                if (!response.ok) {\n                    // 실패 시 원래 상태로 되돌림\n                    likesStore.setLike(songId, currentLiked);\n                    const data = await response.json();\n                    setError(data.error || '좋아요 취소에 실패했습니다');\n                }\n            } else {\n                // 좋아요 추가\n                const response = await fetch('/api/likes', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        songId\n                    })\n                });\n                if (!response.ok) {\n                    // 실패 시 원래 상태로 되돌림\n                    likesStore.setLike(songId, currentLiked);\n                    const data = await response.json();\n                    setError(data.error || '좋아요 추가에 실패했습니다');\n                }\n            }\n        } catch (err) {\n            // 오류 시 원래 상태로 되돌림\n            likesStore.setLike(songId, currentLiked);\n            setError('네트워크 오류가 발생했습니다');\n            console.error('좋아요 토글 오류:', err);\n        } finally{\n            likesStore.setLoading(songId, false);\n        }\n    };\n    return {\n        liked: likesStore.getLike(songId) || false,\n        isLoading: likesStore.isLoading(songId),\n        error,\n        toggleLike\n    };\n}\n// 대량 좋아요 로딩을 위한 훅\nfunction useBulkLikes() {\n    var _session_user;\n    const { data: session } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_1__.useSession)();\n    const loadLikes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBulkLikes.useCallback[loadLikes]\": async function(songIds) {\n            let priority = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'low';\n            var _session_user;\n            if (!(session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.channelId) || !songIds.length) {\n                var _session_user1;\n                console.log('🚫 좋아요 로딩 건너뜀:', {\n                    hasSession: !!(session === null || session === void 0 ? void 0 : (_session_user1 = session.user) === null || _session_user1 === void 0 ? void 0 : _session_user1.channelId),\n                    songCount: songIds.length\n                });\n                return;\n            }\n            await likesStore.bulkLoadLikes(songIds, priority);\n        }\n    }[\"useBulkLikes.useCallback[loadLikes]\"], [\n        session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.channelId\n    ]);\n    return {\n        loadLikes\n    };\n}\n// 좋아요 관련 정보를 가져오는 훅\nfunction useLikes() {\n    const getLikedSongIds = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useLikes.useCallback[getLikedSongIds]\": ()=>{\n            return likesStore.getLikedSongIds();\n        }\n    }[\"useLikes.useCallback[getLikedSongIds]\"], []);\n    return {\n        getLikedSongIds\n    };\n}\nfunction useUserLikes() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n    const { data: session } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_1__.useSession)();\n    const [likes, setLikes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [pagination, setPagination] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetchLikes = async ()=>{\n        var _session_user;\n        if (!(session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.channelId)) return;\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await fetch(\"/api/user/likes?page=\".concat(page, \"&limit=\").concat(limit));\n            if (response.ok) {\n                const data = await response.json();\n                setLikes(data.likes);\n                setPagination(data.pagination);\n            } else {\n                const data = await response.json();\n                setError(data.error || '좋아요 목록을 불러오는데 실패했습니다');\n            }\n        } catch (err) {\n            setError('네트워크 오류가 발생했습니다');\n            console.error('좋아요 목록 조회 오류:', err);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useUserLikes.useEffect\": ()=>{\n            fetchLikes();\n        }\n    }[\"useUserLikes.useEffect\"], [\n        session,\n        page,\n        limit\n    ]);\n    return {\n        likes,\n        isLoading,\n        error,\n        refresh: fetchLikes,\n        pagination\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useLikes.ts\n"));

/***/ })

});